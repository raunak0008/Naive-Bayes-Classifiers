# -*- coding: utf-8 -*-
"""Copy of Untitled5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tLIrbiB7H8LFAAEv6t_g7kk3bZXSc7cT
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.naive_bayes import GaussianNB, MultinomialNB
from sklearn.metrics import accuracy_score

spam_df = pd.read_csv("/content/drive/MyDrive/Colab Notebooks/spam.csv", encoding="latin-1")  # Replace with actual file
spam_df = spam_df.rename(columns={"v1": "label", "v2": "message"})
spam_df["label"] = spam_df["label"].map({"ham": 0, "spam": 1})

X_spam_train, X_spam_test, y_spam_train, y_spam_test = train_test_split(
    spam_df["message"], spam_df["label"], test_size=0.2, random_state=42
)

vectorizer = TfidfVectorizer(stop_words="english")
X_spam_train_transformed = vectorizer.fit_transform(X_spam_train)
X_spam_test_transformed = vectorizer.transform(X_spam_test)

spam_model = MultinomialNB()
spam_model.fit(X_spam_train_transformed, y_spam_train)
spam_predictions = spam_model.predict(X_spam_test_transformed)
spam_accuracy = accuracy_score(y_spam_test, spam_predictions)
print(f"Spam Detection Accuracy: {spam_accuracy:.4f}")

cancer_df = pd.read_csv("/content/drive/MyDrive/Breast_Cancer.csv")  # Replace with actual file
label_encoder = LabelEncoder()

for col in ["Race", "Marital Status", "T Stage ", "N Stage", "6th Stage",
            "differentiate", "Grade", "A Stage", "Estrogen Status", "Progesterone Status", "Status"]:
    cancer_df[col] = label_encoder.fit_transform(cancer_df[col])

X_cancer = cancer_df.drop(columns=["Status"])  # Features
y_cancer = cancer_df["Status"]  # Target variable

X_cancer_train, X_cancer_test, y_cancer_train, y_cancer_test = train_test_split(
    X_cancer, y_cancer, test_size=0.2, random_state=42
)

cancer_model = GaussianNB()
cancer_model.fit(X_cancer_train, y_cancer_train)
cancer_predictions = cancer_model.predict(X_cancer_test)
cancer_accuracy = accuracy_score(y_cancer_test, cancer_predictions)
print(f"Breast Cancer Classification Accuracy: {cancer_accuracy:.4f}")

drug_df = pd.read_csv("/content/drive/MyDrive/drug200.csv")  # Replace with actual file

for col in ["Sex", "BP", "Cholesterol", "Drug"]:
    drug_df[col] = label_encoder.fit_transform(drug_df[col])

X_drug = drug_df.drop(columns=["Drug"])  # Features
y_drug = drug_df["Drug"]  # Target variable

X_drug_train, X_drug_test, y_drug_train, y_drug_test = train_test_split(
    X_drug, y_drug, test_size=0.2, random_state=42
)

drug_model = GaussianNB()
drug_model.fit(X_drug_train, y_drug_train)
drug_predictions = drug_model.predict(X_drug_test)
drug_accuracy = accuracy_score(y_drug_test, drug_predictions)
print(f"Drug Classification Accuracy: {drug_accuracy:.4f}")

dataset_names = ["Spam Detection", "Breast Cancer", "Drug Classification"]
accuracies = [spam_accuracy, cancer_accuracy, drug_accuracy]
accuracy_percentages = [f"{acc * 100:.2f}%" for acc in accuracies]


accuracy_table = pd.DataFrame({"Dataset Name": dataset_names, "Accuracy": accuracy_percentages})

# Display table
print(accuracy_table)

